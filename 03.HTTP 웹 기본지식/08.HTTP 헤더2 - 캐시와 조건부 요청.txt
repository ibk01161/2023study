# 01. 캐시 기본 동작

* 캐시가 없을 때
1) 첫 번째 요청
- GET /start.jpg를 요청 서버에 start.jpg가 있으면 전송 (1.1M(메가) 로 가정 'HTTP 헤더 : 0.1M + HTTP 바디 : 1.1M') 1.1M의 네트웤을 차지하면서 웹 브라우저로 전송해줌
2) 두 번재 요청
- GET /start.jpg를 요청 서버에 start.jpg가 있으면 전송2

- 데이터가 변경되지 않아도 계속 네트워크를 통해 데이터를 다운로드 받아야 함
- 인터넷 네트워크는 매우 느리고 비쌈
- 브라우저 로딩 속도가 느림
- 느린 사용자 경험

* 캐시 적용
1) 첫 번째 요청
- GET /start.jpg를 요청하면 서버에 start.jpg가 있으면 전송 (cache-control - 캐시가 유효한 시간(초), 응답 결과를 캐시에 저장)
2) 두 번째 요청
- GET /start.jpg를 요청하면 브라우저 캐시에 있는지 조회 (캐시 유효 시간 검증) 있으면 바로 가져옴
3) 세 번재 요청 - 캐시 시간 초과
- GET /start.jpg를 요청하면 브라우저 캐시에 있는지 조회 (캐시 유효 시간이 초과됨) => 다시 서버에 요청 / 응답 결과를 다시 저장

- 캐시 덕분에 캐시 가능 시간동아 네트워크를 사용하지 않아도 됨
- 비싼 네트워크 사용량을 줄일 수 있음
- 브라우저 로딩 속도가 매우 빠름
- 빠른 사용자 경험

* 캐시 시간 초과
- 캐시 유효 시간이 초과하면, 서버를 통해 데이터를 다시 조회하고, 캐시를 갱신함
- 이때 다시 네트워크 다운로드가 발생함


# 02. 검증 헤더와 조건부 요청1


# 03. 검증 헤더와 조건부 요청2


# 04. 캐시와 조건부 요청 헤더


# 05. 프록시 캐시


# 06. 캐시 무효화

# 01. 캐시 기본 동작

* 캐시가 없을 때
1) 첫 번째 요청
- GET /start.jpg를 요청 서버에 start.jpg가 있으면 전송 (1.1M(메가) 로 가정 'HTTP 헤더 : 0.1M + HTTP 바디 : 1.1M') 1.1M의 네트웤을 차지하면서 웹 브라우저로 전송해줌
2) 두 번재 요청
- GET /start.jpg를 요청 서버에 start.jpg가 있으면 전송2

- 데이터가 변경되지 않아도 계속 네트워크를 통해 데이터를 다운로드 받아야 함
- 인터넷 네트워크는 매우 느리고 비쌈
- 브라우저 로딩 속도가 느림
- 느린 사용자 경험

* 캐시 적용
1) 첫 번째 요청
- GET /start.jpg를 요청하면 서버에 start.jpg가 있으면 전송 (cache-control - 캐시가 유효한 시간(초), 응답 결과를 캐시에 저장)
2) 두 번째 요청
- GET /start.jpg를 요청하면 브라우저 캐시에 있는지 조회 (캐시 유효 시간 검증) 있으면 바로 가져옴
3) 세 번재 요청 - 캐시 시간 초과
- GET /start.jpg를 요청하면 브라우저 캐시에 있는지 조회 (캐시 유효 시간이 초과됨) => 다시 서버에 요청 / 응답 결과를 다시 저장

- 캐시 덕분에 캐시 가능 시간동아 네트워크를 사용하지 않아도 됨
- 비싼 네트워크 사용량을 줄일 수 있음
- 브라우저 로딩 속도가 매우 빠름
- 빠른 사용자 경험

* 캐시 시간 초과
- 캐시 유효 시간이 초과하면, 서버를 통해 데이터를 다시 조회하고, 캐시를 갱신함
- 이때 다시 네트워크 다운로드가 발생함


# 02. 검증 헤더와 조건부 요청1

* 캐시 시간 초과 - 캐시 유효 시간이 초과해서 서버에 다시 요청하면 두 가지 상황이 나타남
1) 서버에서 기존 데이터를 변경함 (노란 별 => 초록 별)
2) 서버에서 기존 데이터를 변경하지 않음 (캐시 만료후에도 서버에서 데이터를 변경하지 않음)
- 생각해보면 데이터를 전송하는 대신에 저장해 두었던 캐시를 재사용 할 수 있음
- 단 클라이언트의 데이터와 서버의 데이터가 같다는 사실을 확인할 수 있는 방법 필요

* 검증 헤더 추가
1) 첫 번째 요청
- GET /star.jpg를 요청 서버에서 Last-Modified (데이터가 마지막에 수정된 시간), max-age을 응답을 줌 / 응답 결과를 캐시에 저장 (60초 유효 / 데이터 최종 수정일)
2) 두 번째 요청 - 캐시 시간 초과
- GET /star.jpg를 HTTP 요청을 보낼때 브라우저 캐시에 가지고 있는 데이터 최종 수정일을 'if-modified-since' 에 값으로 보냄 / 서버에서 요청을 받을때 star.jpg에 데이터 최종 수정일을 비교해서 데이터가 수정이 되지 않으면
  304 Not Modified로 응답을 주고, HTTP Body를 전송하지 않음 (Header만 전송) => 네트워크 부하 줄어듬 / 클라이언트에서 304를 받았을때 cache-control값 갱신 후, 브라우저 캐시에서 조회

* 검증 헤더(Last-Modified)와 조건부 요청(if-modified-since)
- 캐시 유효 시간이 초과해도, 서버의 데이터가 갱신되지 않으면
- 304 Not Modified + 헤더 메타 정보만 응답 (바디X)
- 클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보를 갱신
- 클라이언트는 캐시에 저장되어 있는 데이터 재활용
- 결과적으로 네트워크 다운로드가 발생하지만 용량이 적은 헤더 정보만 다운로드
- 매우 실용적인 해결책


# 03. 검증 헤더와 조건부 요청2

* 검증 헤더
- 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
- Last-modified, ETag (활용해서 조건부 요청 헤더 만들어서 서버로 보내주면 됨)

* 조건부 요청 헤더
- 검증 헤더로 조건에 따른 분기
- If-Modified-Since : Last-Modified와 사용
- If-None-Match: ETag와 사용
- 조건이 만족하면 200 OK
- 조건이 만족하지 않으면 304 Not Modified

* 검증 헤더와 조건부 요청 - 예시
1) If-Modified-Since: 이후 데이터가 수정되었으면?
- 데이터 미변경 예시
  - 캐시: 2020년 11월 10일 10:00:00 vs 서버 2020년 11월 10일 10:00:00
  - 304 Not Modified, 헤더 데이터만 전송 (BODY 미포함) / 304란? - 캐시로 리다이렉션 해서 그 데이터를 뿌려라..
  - 전송 용량 0.1M (헤더-0.1M, 바디-1.0M)
- 데이터 변경 예시
  - 캐시: 2020년 11월 10일 10:00:00 vs 서버 2020년 11월 10일 '11':00:00
  - 200 OK, 모든 데이터 전송 (BODY 포함)
  - 전송 용량 1.1M (헤더-0.1M, 바디-1.0M)

* 검증 헤더와 조건부 요청 - Last-Modified, If-Modified-Since 단점
- 1초 미만(0.x초) 단위로 캐시 조정이 불가능
- 날짜 기반 로직 사용
- 데이터를 수정해서 날짜가 다르지만, 같은 데이터를 수정해서 데이터 결과가 똑같은 경우
- 서버에서 별도의 캐시 로직을 관리하고 싶은 경우 (스페이스나 주석처럼 크게 영향이 없는 변경에서 캐시를 유지하고 싶은 경우)

* ETag, If-None-Match
- ETag(Entity Tag)
- 캐시용 데이터에 임의의 고유한 버전 이름을 달아둠 (ETag: "v1.0", ETag: "a2jiodwjekjl3")
- 데이터가 변경되면 이 이름을 바꾸어서 변경(Hash를 다시 생성) (ETag: "aaaa" -> ETag: "bbbb")
- 진짜 단순하게 ETag만 보내서 같으면 유지, 다르면 다시 받기

* ETag, If-None-Match - 정리
- 진짜 단순하게 ETag만 서버에 보내서 같으면 유지, 다르면 다시 받기
- 캐시 제어 로직을 서버에서 완전히 관리
- 클라이언트는 단순히 이 값을 서버에 제공 (클라이언트는 캐시 메커니즘을 모름)
- 예) 서버는 베타 오픈 기간인 3일 동안 파일이 변경되어도 ETag를 동일하게 유지 / 애플리케이션 배포 주기에 맞추어 ETag 모두 갱신


# 04. 캐시와 조건부 요청 헤더

* 캐시 제어 헤더
1) Cache-Control : 캐시 제어 (캐시 지시어 - directives)
- Cache-Control: max-age => 캐시 유효 시간, 초 단위 / 캐시가 얼마동안 유효 할것인지?
- Cache-Control: no-cache => 데이터는 캐시해도 되지만, 원(orgin) 서버에 무조건 검증하고 사용 (원서버 - 중간에 캐시 서버 같은게 있는데 이걸 거쳐서 진짜 서버에 접근할수도 있음. 뒤에 있는 진짜 서버를 뜻함)
- Cache-Control: no-store => 데이터에 민감한 정보가 있으므로 저장하면 안됨 (메모리에서 사용하고 최대한 빨리 삭제)

2) Pragma : 캐시 제어(하위 호환)
- Pragma: no-chache
- HTTP 1.0 하위 호환
- 거의 사용하지 않음

3) Expires : 캐시 유효 기간(하위 호환) (캐시 만료일 지정)
- expires: Mon, 01, Jan 1990 00:00:00 GMT
- 캐시 만료일을 정확한 날짜로 지정
- HTTP 1.0 부터 사용
- 지금은 더 유연한 Cache-Control: max-age 권장
- Cache-Control: max-age와 함께 사용하면 Expires는 무시

* 검증 헤더와 조건부 요청 헤더
1) 검증 헤더 (Validator)
- ETag: "v1.0",  ETag: "asid93gvfe2l"
- Last-Modified: Thu, 04 Jun 2020 07:19:24 GMT
2) 조건부 요청 헤더
- If-Match, If-None-Match: ETag값 사용
- If-Modified-Since, If-Unmodified-Since : Last-Modified값 사용  


# 05. 프록시 캐시

* Cache-Control (캐시 지시어 - directive) - 기타
- Cache-Control: public => 응답이 public 캐시에 저장되어도 됨
- Cache-Control: private => 응답이 해당 사용자만을 위한 것, private 캐시에 저장해야 함 (기본값)
- Cache-Control: s-maxage => 프록시 캐시에만 적용되는 max-age
- Age: 60 (HTTP 헤더) : 오리진 서버에서 응답 후 프록시 캐시 내에 머문 시간(초)


# 06. 캐시 무효화

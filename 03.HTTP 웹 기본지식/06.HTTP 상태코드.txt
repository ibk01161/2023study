# 01. HTTP 상태코드 소개

* 상태 코드
- 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능
1. 1xx (Informational) : 요청이 수시되어 서버에서 처리중 (거의 사용되지 않음)
2. 2xx (Successful) : 요청 정상 처리 (200, 201...)
3. 3xx (Redirection) : 요청을 완료하려면 추가 행동 필요
4. 4xx (Client Error) : 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없음
5. 5xx (Server Error) : 서버 오류, 서버가 정상 요청을 처리하지 못함

* 만약 모르는 상태 코드가 나타나면?
- 클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면?
- 클라이언트는 상위 상태코드로 해석해서 처리
- 미래에 새로운 상태 코드가 추가되어도 클라이언트를 변경하지 않아도 됨
ex) 299? => 2xx (Successful) / 451? => 4xx (Client Error) 등


# 02. 2xx - 성공

* 2xx (Successful) : 클라이언트의 요청을 성공적으로 처리
- 200 (Ok) : 요청 성공, 결과를 정상적으로 잘 처리해서 응답을 하면 Ok
- 201 (Created) : 요청 성공해서 새로운 리소스를 생성 (POST로 등록처리 했을 때), 생성된 리소스는 응답의 Location 헤더 필드로 식별 (Location: /members/100 <- 새로 생성된 리소스 URI)
- 202 (Accepted) : 요청이 접수되었으니 처리가 완료되지 않았음, 배치 처리 같은 곳에서 사용, 요청 접수 후 1시간 뒤 배치 프로세스가 요청을 처리 (잘 사용하지 않음)
- 204 (No Content) : 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음
                          웹 문서 편집기에서 save 버튼
                          save 버튼의 결과로 아무 내용이 없어도 된다.
                          save 버튼을 눌러도 같은 화면을 유지해야 한다.
                          결과 내용이 없어도 204 메시지(2xx)만으로 성공을 인식할 수 있다.


# 03. 3xx - 리다이렉션1

* 3xx (Redirection) : 요청을 완료하기 위해 유저 에이전트(클라이언트 프로그램 => 웹 브라우저)의 추가 조치 필요
- 300 Multiple Choices (거의 안씀)
- 301 Moved Permanently
- 302 Found
- 303 See Other
- 304 Not Modified
- 307 Temporary Redirect
- 308 Permanent Redirect

- 웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동 (리다이렉트)

(보충하기 강의 2분쯤)

* 리다이렉션 이해
1) 영구 리다이렉션 : 특정 리소스의 URI가 영구적으로 이동 (301, 308)
ex) /members -> /users
ex) /event -> /new-event

- 원래의 URL을 사용X, 검색 엔진 등에서도 변경 인지 (/event로 들어옴 검색 엔진은 /new-evnet를 써야함)
- 301 Moved Permanently : 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음(MAY)
- 308 Permanent Redirect : 301과 기능은 같음, 리다이렉트시 요청 메서드와 본문 유지(처음 POST를 보내면 리다이렉트로 요청할때도 POST)
(7~8분 보충)

2) 일시 리다이렉션 : 일시적인 변경
- 주문 완료 후 주문 내역 화면으로 이동
- PRG : POST/Redirect/Get (자주 쓰는 패턴)

3) 특수 리다이렉션
- 결과 대신 캐시를 사용


# 04. 3xx - 리다이렉션2

* 일시 리다이렉션 : 일시적인 변경
- 리소스의 URI가 일시적으로 변경
- 따라서 검색 엔진 등에서 URL을 변경하면 안됨
- 302 Found : 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음 (MAY)
- 307 Temporary Redirect : 302와 기능은 같음, 리다이렉트 시 요청 메서드와 본문 유지(요청 메서드를 변경하면 안됨, MUST NOT), POST로 보내면 POST로 유지
- 303 See Other : 302와 기능은 같음, 리다이렉트 시 요청 메서드가 GET으로 변경

307은 유지
303 명확하게 GET으로 변경
302는 대부분 GET으로 변경 (실무에서 많이 사용)

* PRG : Post/Redirect/Get - 일시적인 리다이렉션 예시
- POST로 주문 후 웹 브라우저를 새로고침하면?
- 새로고침은 다시 요청
- 중복 주문이 될 수 있음

- POST로 주문 후 새로 고침으로 인한 중복 주문 방지 (클라이언트 차원에서 방지할 수 있음, 서버에서도 막아야 함)
- POST로 주문 후 주문 결과 화면을 GET 메서드로 리다이렉트 
- 새로고침해도 결과 화면을 GET으로 조회
- 중복 주문 대신에 결과 화면만 GET으로 다시 요청

- PRG 이후 리다이렉트 : URL은 이미 POST -> GET으로 리다이렉트 됨, 새로 고침 해도 GET으로 결과 화면만 조회

* 정리
- 302 Found : GET으로 변할 수 있음
- 307 Temporary Redirect : 메서드가 변하면 안됨
- 303 See Other : 메서드가 GET으로 변경

* 역사
- 처음 302 스펙의 의도는 HTTP 메서드를 유지하는 것
- 그런데 웹 브라우저들이 대부분 GET으로 바꾸어버림 (일부는 다르게 동작)
- 그래서 모호한 302를 대신하는 명확한 307, 303이 등장 (301 대응으로 308도 등장)

* 현실
- 307, 303을 권장하지만 현실적으로 이미 많은 애플리케이션 라이브러리들이 302를 기본값으로 사용
- 자동 리다이렉션 시 GET으로 변해도 되면 그냥 302를 사용해도 큰 문제 없음

* 기타 리다이렉션
- 300 Multiple Choices : 안씀
- 304 Not Modified
  - 캐시를 목적으로 사용
  - 클라이언트에게 리소스가 수정되지 않았음을 알려줌, 따라서 클라이언트는 로컬PC에 저장된 캐시를 재사용함 (캐시로 리다이렉트 함)
  - 304 응답은 응답에 메시지 바디를 포함하면 안됨 (로컬 캐시를 사용해야 하므로)
  - 조건부 GET, HEAD 요청시 사용


**** 08.08 3,4단원 복습 후 다시 정리하기!


# 05. 4xx - 클라이언트 오류, 5xx - 서버 오류
























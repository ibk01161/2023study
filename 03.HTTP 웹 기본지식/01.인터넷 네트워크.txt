# 01. 인터넷 통신

# 02. IP (인터넷 프로토콜)

* IP 인터넷 프로토콜 역할
- 지정한 IP 주소 (IP Address)에 데이터 전달
- 패킷(Packet)이라는 통신 단위로 데이터 전달

* IP 패킷 정보
- 출발지 IP, 목적지 IP, 전송 데이터...

* 클라이언트 패킷 전달
클라이언트 -> 서버로 전달

* 서버 패킷 전달
서버 -> 클라이언트로 전달

* IP 프로토콜의 한계
- 비연결성 : 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송 (상대방 PC가 꺼져있을 수도 있음, 클라이언트는 대상 서버가 패킷을 받을 수 있는 상태인지 모름)
- 비신뢰성 : 중간에 패킷이 사라지면?, 패킷이 순서대로 안오면? (1500바이트가 넘으면 끊어서 보냄, 패킷이 중간에 다른 노드를 탈 수 있음)
- 프로그램 구분 : 같은 IP를 사용하는 서버에서 통신하는 애프리케이션이 둘 이상이면?

# 03. TCP, UDP

* 인터넷 프로토콜 스택의 4계층
1) 애플리케이션 계층 : HTTP, FTP
2) 전송 계층 : TCP, UDP
3) 인터넷 계층 - IP
4) 네트워크 인터페이스 계층

* 프로토콜 계층
1) 애플리케이션 : 웹브라우저, 네트워크 게임, 채팅 프로그램, 소켓 라이브러리
2) OS : TCP, UDP, IP
3) 네트워크 인터페이스 : LAN드라이버. LAN장비

* IP 패킷 정보
- 출발지 IP, 목적지 IP 기타...

* TCP/IP 패킷 정보
- 출발지 PORT, 목적지 PORT, 전송 제어, 순서, 검증 정보..

* TCP 특징 (전송 제어 프로토콜 - Transmission Control Protocol)
- 연결지향 : TCP 3 way handshake(가상 연결) => 연결이 됐는지 확인, 연결을 하고 메세지를 보냄
- 데이터 전달 보증 => 메세지 누락 여부 알 수 있음
- 순서 보장
- 신뢰할 수 있는 프로토콜
- 현재는 대부분 TCP 사용

* TCP 3 way handshake
1. 클->서 : SYN 메세지 보냄
2. 서->클 : SYN + ACK 메세지 보냄
3. 클->서 : ACK 메세지 보냄 (ACK와 함께 데이터 전송 가능)

- SYN : 접속 요청, ACK : 요청 수락, ACK와 함께 데이터 전송 가능

* 데이터 전달 보증

* 순서 보장
1. 패킷1, 패킷2, 패킷3 순서로 전송 (클->서)
2. 패킷1, 패킷3, 패킷2 순설 도착하면
3. 패킷2 부터 다시 보내라고 함 (서->클)

=> TCP/IP패킷안에 전송제어, 순서, 검증 정보 때문에 가능

* UDP 특징 (사용자 데이터그램 프로토콜 - User Datagram Protocol)
- 햐얀 도화지에 비유(기능이 거의 없음)
- 연결 지향, 데이터 전달 보증, 순서 보장 X
- 단순하고 빠름
- IP와 거의 같음 (PORT, 체크섬 정도만 추가)
- 애플리케이션에서 추가 작업 필요



































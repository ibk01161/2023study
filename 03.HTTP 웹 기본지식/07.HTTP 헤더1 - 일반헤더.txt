# 01. HTTP 헤더 개요

* HTTP 헤더
-  header-field = field-name ":" OWS field-value OWS (OWS: 띄어쓰기 허용)

* HTTP 헤더 용도
- HTTP 전송에 필요한 모든 부가정보
- 예) 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트, 서버 정보, 캐시 관리 정보 등
- 표준 헤더가 너무 많음
- 필요시 임의의 헤더 추가 가능 : helloworld: hihi

* 분류 - RFC2616(과거)
- 헤더 분류
  - General 헤더 : 메시지 전체에 적용되는 정보(요청 메시지, 응답 메시지 구분 없이 전체) / 예) Connection: close
  - Request 헤더 : 요청 정보 / 예) User-Agent: Mozilla/5.0 (Macintosh;..)
  - Response 헤더 : 응답 정보, 요청을 받아 처리하는 서버 정보 / 예) Server: Apache
  - Entity 헤더 : 엔티티 바디 정보 / 예) Content-Type: text/html, Content-Length: 3423

* HTTP BODY: message body - RFC2616(과거)
- 메시지 본문(message body)은 엔티티 본문(entity body)을 전달하는데 사용
- 엔티티 본문은 요청이나 응답에서 전달할 실제 데이터, 메시지 본문 안에 엔티티 본문을 담아서 전달
- "엔티티 헤더"는 "엔티티 본문"의 데이터를 해석할 수 있는 정보 제공
  - 데이터 유형(html, json), 데이터 길이, 압축 정보 등등

** 1999년 RFC2616 폐기 => 2014년 RFC7230 ~ 7235 등장

* RFC723x 변화
- 엔티티(Entity) => 표현(Representation)
- Representation = representation MetaData + Representation Data
- 표현 = 표현 메타데이터 + 표현 데이터

* HTTP BODY: message body - RFC7230(최신)
- 메시지 본문(message body)을 통해 표현 데이터 전달
- 메시지 본문 = 페이로드(payload)
- "표현"은 요청이나 응답에서 전달할 실제 데이터
- "표현 헤더는 표현 데이터"를 해석할 수 있는 정보 제공
  - 데이터 유형(html, json), 데이터 길이, 압축 정보 등등
- 참고 : 표현 헤더는 표현 메타데이터와 페이로드 메시지를 구분해야 하지만, 여기서는 생략


# 02. 표현

* 표현
회원이라는 리소스를 HTML이라는 표현으로 전달할건지? JSON이라는 표현으로 전달할건지?

- Content-Type: 표현 데이터의 형식
- Content-Encoding: 표현 데이터의 압축 방식
- Content-Language: 표현 데이터의 자연 언어
- Content-Length: 표현 데이터의 길이 => 명확하게 표현 헤더보다는 페이로드 헤더
* 표현 헤더는 전송, 응답 둘다 사용 가능

1) Content-type - 표현 데이터의 형식 설명
- 미디어 타입, 문자 인코딩
- Content body에 들어가는 내용이 어떤 표현방식인지?
- 예) text/html; charset=utf-8, applicaiton/json, image/png

2) Content-Encoding - 표현 데이터 인코딩
- 표현 데이터를 압축하기 위해 사용
- 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가 (gzip) / 서버에서 압축을 해서 클라이언트로 보냄 / 클라이언트는 어떤걸로 압축되어 있는지 알아야 함
- 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제 / 예) gzip, deflate, identity(압축 안함)
3) Content-Language - 표현 데이터의 자연 언어
- 표현 데이터의 자연 언어를 표현 / 예) ko, en, en-US

4) Content-Length - 표현 데이터의 길이
- 바이트 단위
- Transfer-Encoidng(전송 코딩)을 사용하면 Content-Length를 사용하면 안됨


# 03. 콘텐츠 협상

* 협상 (콘텐츠 네고시에이션) - 클라이언트가 선호하는 표현 요청
=> 서버가 클라이언트가 원하는 우선순위에 맞춰서 데이터를 만들어 주는것

- Accept : 클라이언트가 선호하는 미디어 타입 전달
- Accept-Charset : 클라이언트가 선호하는 문자 인코딩
- Accept-Encoding : 클라이언트가 선호하는 압축 인코딩
- Accept-Language : 클라이언트가 선호하는 자연 언어
=> 협상 헤더는 요청시에만 사용

* Accept-Language 예시

1) Accept-Language 적용 전
- 한국어 브라우저 사용 '/evnet'로 들어감 [GET /event]
- 서버가 다중 언어 지원 서버: 기본 영어(en) / 한국어 지원(ko) [Content-Language: en]

2) Accept-Language 적용 후
- 한국어 브라우저 사용 '/evnet'로 들어감 [GET /event, Accept-Language: ko] => 클라이언트에서 서버 요청할때 선호 언어를 보냄
- 서버가 다중 언어 지원 서버: 기본 영어(en) / 한국어 지원(ko) [Content-Language: ko]

3) Accept-Language 복잡한 예시
- 한국어 브라우저 사용 '/evnet'로 들어감 [GET /event, Accept-Language: ko] => 클라이언트에서 서버 요청할때 선호 언어를 보냄
- 서버가 다중 언어 지원 서버: 기본 독일어(de) / 영어 지원(en) [Content-Language: de] => ko가 없으니까 기본언어 보냄

해결방법 : 헤더에 우선순위를 같이 보냄 ex) [GET /event, Accept-Language: ko-KR,ko;q=0.9,en-Us;q=0.8,en;q=0.7] => en의 Quality values값이 0.7이니까 en을 보냄

* 협상과 우선순위1 (Quality Values(q)) [GET /event, Accept-Language: ko-KR,ko;q=0.9,en-Us;q=0.8,en;q=0.7]
- Quality Values(q) 값 사용
- 0~1, 클수록 높은 우선순위
- 생략하면 1
-- 'Accept-Language: ko-KR,ko;q=0.9,en-Us;q=0.8,en;q=0.7'
   - 1. ko-KR;q=1 (q 생략)
   - 2. ko;q=0.9
   - 3. en-US;q=0.8
   - 4. en;q=0.7

* 협상과 우선순위2 (Quality Values(q)) [GET /event, Accept: text/*, text/plain, text/plain;format=flowed, */*]
- 구체적인 것이 우선
-- 'Accept: text/*, text/plain, text/plain;format=flowed, */*'
   - 1. text/plain;format=flowed
   - 2. text/plain
   - 3. text/*
   - 4. */*

* 협상과 우선순위3 (Quality Values(q))
- 구체저거인 것을 기준으로 미디어 타입을 맞춤
-- 'Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,text/html;level=2;q=0.4, */*;q=0.5


# 04. 전송 방식

* 전송 방식 설명
1) 단순 전송 (Content-Length)
- 메시지 바디에 대한 Content-Length를 지정, Content-Length를 알때 사용
- 한번에 요청하고 한번에 받는것

2) 압축 전송 (Content-Encoding)
- gzip 같은 압축을 사용 (Content-Encoding을 헤더에 추가해야 함)

3) 분할 전송 (Transfer-Encoding)
- chunked(덩어리) 를 쪼개서 보냄 (헤더에 Transfer-Encoding: chunked 추가)
- 5바이트를 먼저 보내고, 클라이언트에서 받고 / 5바이트를 보내고, 클라이언트에 받고 / 마지막에는 0이라고 표시하고 \r\n으로 보냄
- Content-Length를 넣으면 안됨 (분할해서 보낼때 길이를 같이 보내기 때문)

4) 범위 전송 (Range, content-Range)
- 이미지를 받는데 중간에 절반정도 받고, 끊길경우 끊긴 부분부터 다시 받을 수 있음 (범위)


# 05. 일반 정보

* 일반 정보 (정보성 헤더)
1) From : 유저 에이전트의 이메일 정보
- 일반적으로 잘 사용되지 않음
- 검색 엔진 같은 곳에서 주로 사용
- 요청에서 사용

2) Referer : 이전 웹 페이지 주소 (많이쓰임)
- 현재 요청된 페이지의 이전 웹 페이지 주소
- A -> B 로 이동하는 경우 B를 요청할 때 Referer:A를 포함해서 요청
- Referer를 사용해서 유입 경로 분석 가능
- 요청에서 사용
- referer는 단어 referrer의 오타

3) User-Agent : 유저 에이전트 애플리케이션 정보
- user-agent : Mozilla/5.0 ~~ AppleWebkit/537.36 ~~ Chrome/86.0.4240.183 Safari/537.36
- 클라이언트의 애플리케이션 정보(웹 브라우저 정보 등)
- 통계 정보
- 어떤 종류의 브라우저에서 장애가 발생하는지 파악 가능
- 요청에서 사용

4) Server : 요청을 처리하는 오리진 서버의 소프트웨어 정보 (Origin 서버 : HTTP 요청을 보내면 중간에 여러 서버(프록시)를 거치는데 실제 나의 요청이 도착해서 HTTP응답을 해주는 서버 (끝의 서버))
- Server: Apache/2.2.22 (Debian)
- server:nginx
- 응답에서 사용

5) Date : 메시지가 생성된 날짜
- Date : Tue, 15 Nov 1994 08:12:31 GMT
- 응답에서 사용


# 06. 특별한 정보

* 특별한 정보
1) Host : 요청한 호스트 정보(도메인) (중요, 필수값)
- 요청에서 사용
- 필수
- 하나의 서버가 여러 도메인을 처리해야 할 때 (하나의 ip주소에 여러 도메인이 적용되어 있을 때 구분해줌) / 가상호스트를 통해 여러 도메인을 한번에 처리할 수 있는 서버, 실제 애플리케이션이 여러개 구동될 수 있음
- 호스트가 없으면 aaa.com에 갈지 bbb.com에 갈지 구분을 할 방법이 없음 / 헤더에 [GET /hello HTTP/1.1 Host: aaa.com] Host 헤더를 넣음

2) Location : 페이지 리다이렉션
- 웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동(리다이렉트)
- 응답코드 3xx 강의 참고
- 201 (Created) : Location 값은 요청에 의해 생성된 리소스 URI
- 3xx (Redirection) : Location 값은 요청을 자동으로 리다이렉션하기 위한 대상 리소스를 가리킴

3) Allow : 허용 가능한 HTTP 메서드
- 405 (Method Not Allowed) 에서 응답에 포함해야함
- Allow : GET, HEAD, PUT

4) Retry-After : 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간 (사용하기 힘듬)
- 503 (Service Unavailable) : 서비스가 언제까지 불능인지 알려줄 수 있음
- Retry-After : Fri, 31 Dec 1999 23:59:59 GMT (날짜 표기)
- Retry-After : 120 (초단위 표기)


# 07. 인증

* 인증
1) Authorization : 클라이언트 인증 정보를 서버에 전달
- 인증하는 여러가지 매커니즘 마다 value에 들어가는 값이 각각 다름

2) WWW-Authenticate : 리소스 접근시 필요한 인증 방법 정의
- 리소스 접근시 필요한 인증 방법 정의
- 401 Unauthorized 응답과 함게 사용
- 401오류가 날때 이 헤더를 넣어줌 (WWW-Authenticate: Newauth realm="apps", type=1, tilte="Login to \"apps\"", Basic realm="simple")


# 08. 쿠키
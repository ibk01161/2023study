# 01. URI

* URI (Uniform Resource Identifier)
- 리소스를 식별하는 통합된 방법

* URI? URL(Resource Locator)? URN(Resource Name)?
- URI는 로케이터(Locator), 이름(name) 또는 둘 다 추가로 분류될 수 있음
- URI는 URL과 URN을 포함

* URL(Resource Locator) : foo://example.com:8042/over/there?name=ferret#nose (웹 브라우저에서 적는 url)
* URN(Resource Name) : urn:example:animal:ferret:nose (이름을 부여하는것)

* URI
- Uniform : 리소스 식별하는 통일된 방식
- Resource : 자원, URI로 식별할 수 있는 모든 것 (제한 없음)
- Identifier : 다른 항목과 구분하는데 필요한 정보

* URL, URN
- URL - Locator : 리소스가 있는 위치를 지정
- URN - Name : 리소스에 이름을 부여
- 위치는 변할 수 있지만, 이름은 변하지 않음
- URN 이름으로 실제 리소스를 찾을 수 있는 방법이 보편화 되지 않음

* URL 분석
- https://www.google.com/search?q=hello&hl=ko

* URL 전체 문법
- scheme://[userinfo@]host[:port][/path][?query][#fragment]
- https://www.google.com:443/search?q=hello&hl=ko

- 프로토콜 (https)
- 호스트명(www.google.com)
- 포트 (443)
- 패스 (/search)
- 쿼리 파라미터 (q=hello&hl=ko)

* scheme (https)
- 주로 프로토콜 사용
- 프로토콜 : 어떤 방식으로 자원(클-서)에 접근할 것인가 하는 약속 규칙 ex) http, https, ftp 등등
- http는 80 포트, https는 443 포트를 주로 사용, 포트는 생략 가능
- https는 http에 보안 추가 (HTTP Secure)

* userinfo
- URL에 사용자정보를 포함해서 인증
- 거의 사용하지 않음

* host (www.google.com)
- 호스트명
- 도메인명 또는 IP 주소를 직접 사용가능
- 특정 서버에 따로 접근할때는 입력

* port (443)
- 접속 포트
- 일반적으로 생략, 생략시 http는 80, https는 443

* path (search)
- 리소스 경로(path), 계층적 구조
- ex) /home/file1.jpg
      /members
      /members/100, /items/iphone12

* query (?q=hello&hl=ko)
- key=value 형태
- ?로 시작, &로 추가 가능 (?keyA=valueA&keyB=valueB)
- query parameter, query string 등으로 불림, 웹서버에 제공하는 파라미터 문자 형태

* fragment (#getting-started-introducing-spring-boot)
- html 내부 북마크 등 사용
- 서버에 전송하는 정보가 아님


# 02. 웹 브라우저 요청 흐름

* 웹 브라우저 요청 흐름
- 웹 브라우저가 DNS 조회 해서 ip, 포트 정보 찾아냄
1. HTTP 요청 메세지 생성 (path, query정보, http버전 정보, host 등)
2. Socket 라이브러리를 통해 전달, A: TCP/IP 연결 (IP, PORT), B: 데이터 전달
3. TCP/IP 패킷 생성, HTTP 메세지 포함
4. 요청 패킷을 받으면 TCP/IP 패킷의 정보는 버리고, HTTP 요청 메세지안에 있는 정보를 보고 해석을 함)
5. 구글 서버에서 HTTP 응답 메세지를 만듬 (HTTP 버전, HTTP 응답 코드, Content-type, Content-Length, HTML 데이터 등) 후 TCP/IP 씌우고 웹 브라우저로 보냄
6. HTTP 응답 메세지 안에 있는 HTML 데이터를 받아 웹 브라우저와 HTML랜더링 해서 그 결과를 보여줌













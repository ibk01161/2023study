# 01. 클라이언트에서 서버로 데이터 전송

* 데이터 전달 방식은 크게 2가지
1. 쿼리 파라미터를 통한 데이터 전송
- GET
- 주로 정렬 필터(검색어)

2. 메시지 바디를 통한 데이터 전송
- POST, PUT, PATCH
- 회원 가입, 상품 주문, 리소스 등록, 리소스 변경

* 4가지 상황
1. 정적 데이터 조회
- 이미지, 정적 텍스트 문서, 조회는 GET 사용
- 정적 데이터는 일반적으로 쿼리 파라미터 없이 리소스 경로로 단순하게 조회 가능

2. 동적 데이터 조회
- 주로 검색, 게시판 목록에서 정렬 필터(검색어)
- 조회 조건을 줄여주는 필터, 조회 결과를 정렬하는 정렬 조건에 주로 사용
- 조회는 GET 사용
- 쿼리 파라미터 사용, 쿼리 파라미터를 기반으로 정렬 필터해서 결과를 동적으로 생성

3. HTML Form을 통한 데이터 전송 (POST 전송 - 저장)
- 회원 가입, 상품 주문, 데이터 변경

- Content-Type: application/x-www-form-urlencoded 사용
  - form의 내용을 메시지 바디를 통해서 전송 (key=value, 쿼리 파라미터 형식)
  - 전송 데이터를 url encoding 처리 / 예) abc김 => abc%EA%B9%80

Form의 전송(submit) 을 누르면 폼의 데이터를 읽어서 HTTP 메시지를 생성해줌
--------------------------------------------------------
Content-Type: application/x-www-form-urlencoded
username=kim&age=20 (HTTP 바디)
--------------------------------------------------------
서버에 들어오면 데이터를 저장

- HTML Form은 GET 전송도 가능 (url 경로에 쿼리 파라미터 형식으로 들어감 / 조회에 사용)
--------------------------------------------------------
GET /save?username=kim&age=20 HTTP/1.1
--------------------------------------------------------

- Content-Type: multipart/form-data
  - 파일 업로드 같은 바이너리 데이터 전송시 사용
  - 다른 종류의 여러 파일과 폼의 내용 함게 전송 가능(그래서 이름이 multipart)
--------------------------------------------------------
Content-Type: multipart/form-data; boundary=---XXX

---XXX
kim
---XXX
20
---XXX
--------------------------------------------------------
boundary가 경계를 잘라줌

- HTML Form 전송은 "GET, POST" 만 지원

4. HTTP API를 통한 데이터 전송
- 회원 가입, 상품 주문, 데이터 변경
- 서버 to 서버(백엔드 시스템 통신), 앱 클라이언트(아이폰, 안드로이드), 웹 클라이언트(HTML에서 Form 전송 대신 자바 스크립트를 통한 통신에 사용(Ajax), React, Vue js 같은 웹 클라이언트와 API 통신)
- POST, PUT, PATCH: 메시지 바디를 통해 데이터 전송
- GET : 조회, 쿼리 파라미터로 데이터 전달
- Content-Type: application/json을 주로 사용 (사실상 표준)
  - TEXT, XML, JSON 등등


# 02. HTTP API 설계 예시

* HTTP API 설계 예시
1. HTTP API - 컬렉션
- POST 기반 등록 (회원 관리 API 제공)

2. HTTP API - 스토어
- PUT 기반 등록 (정적 컨텐츠 관리, 원격 파일 관리)

3. HTML FORM 사용
- GET, POST만 지원 (웹 페이지 회원 관리)

* 회원 관리 시스템 API 설계 (POST 기반 등록)
- 회원 목록 /members => GET
- 회원 등록 /members => POST
- 회원 조회 /members/{id} => GET
- 회원 수정 /members/{id} => PATCH, PUT, POST (PATCH가 가장 좋음)
- 회원 삭제 /members/{id} => DELETE

=> uri, 리소스 식별, 리소스가 아닌 다른걸 식별을 하면 안됨 / 리소스 : members

- 클라이언트는 등록될 리소스의 URI를 모름
  - 회원 등록 /members => POST
  - POST /members
- 서버가 새로 등록된 리소스 URI를 생성해줌
  - HTTP/1.1 201 Created
    Location: "members/100"
- 컬랙션 (Collection)
  - 서버가 관리하는 리소스 디렉토리
  - 서버가 리소스의 URI를 생성하고 관리
  - 여기서 컬랙션은 /members

* 파일 관리 시스템 API 설계 (PUT 기반 등록)
- 파일 목록 /files => GET
- 파일 조회 /files/{filename} => GET
- 파일 등록 /files/{filename} => PUT
- 파일 삭제 /files/{filename} => DELETE
- 파일 대량 등록 /files => POST (POST의 의미를 임의로 정할 수 있음)

- 클라이언트가 리소스 URI를 알고 있어야 한다.
  - 파일 등록 /files/{filename} => PUT
  - PUT files/star.jpg
- 클라이언트가 직접 리소스의 URI를 지정
- 스토어 (Store)
  - 클라이언트가 관리하는 리소스 저장소
  - 클라이언트가 리소스의 URI를 알고 관리
  - 여기서 스토어는 /files

* POST - 신규 자원 등록 특징
- /members로 서버로 넘기고 끝
- 서버가 알아서 회원의 id만들고 최종적으로 리소스 URI에 대한 경로도 서버가 판단해서 클라이언트로 보냄

* PUT - 신규 자원 등록 특징
- 리소스 URI를 다 알고 등록
- 클라이언트가 등록될 리소스의 URI를 본인(클라이언트)이 관리 => star.jpg

=> 거의 POST 사용!

* HTML FORM 사용
- HTML FORM은 GET, POST만 지원
- AJAX같은 기술을 사용해서 해결 가능 -> 회원 API 참고
- 여기서는 순수 HTML + HTML FORM
- GET, POST만 지원하므로 제약이 있음

- 회원 목록 /members => GET
- 회원 등록 폼 /members/new => GET
- 회원 등록 /members/new, /members => POST (등록 폼 URI와 등록 URI를 1대1로 맞추는게 좋음)
- 회원 조회 /members/{id} => GET
- 회원 수정 폼 /members/{id}/edit => GET
- 회원 수정 /members/{id}/edit, /members/{id} => POST
- 회원 삭제 /members/{id}/delete => POST

- 컨트롤 URI
  - GET, POST만 지원하므로 제약이 있음
  - 이런 제약을 해결하기 위해 동사로 된 리소스 경로 사용(/new, /edit..._)
  - POST의 /new, /edit, /delete가 컨트롤 URI
  - HTTP 메서드로 해결하기 애매한 경우 사용 (HTTP API 포함)
  - 최대한 리소스라는 개념을 가지고 URI 설계 하고 그 상황에서 안될때 컨트롤 URI를 대체제로 쓴다.

** 참고하면 좋은 URI 설계 개념
1. 문서 (document)
  - 단일 개념 (파일 하나, 객체 인스턴스, 데이터베이스 row) - /member/100, /files/start.jpg

2. 컬랙션 (Collection)
  - 서버가 관리하는 리소스 디렉터리, 서버가 리소스의 URI를 생성하고 관리 - /members
  - 클라이언트는 요청만 함 (~~를 저장해주세요.)
  - 가장 많이 사용

3. 스토어 (Store)
  - 클라이언트가 관리하는 자원 저장소, 클라이언트가 리소스의 URI를 알고 관리 - /files
  - 전체 URI 경로를 PUT으로 해서 넣어버림

4. 컨트롤러(controller), 컨트롤 URI
  - 문서, 컬랙션, 스토어로 해결하기 어려운 추가 프로세스 실행, 동사를 직접 사용 - /members/{id}/delete


* 참고 : https://restfulapi.net/resource-naming/
